// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/geekxflood/alertmanager-cli/models"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
)

// Schema cli for PostableAlert

// register flags to command
func registerModelPostableAlertFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register anonymous fields for AO0

	if err := registerPostableAlertAnonAO0Annotations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPostableAlertAnonAO0EndsAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPostableAlertAnonAO0StartsAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register embedded Alert flags

	if err := registerModelAlertFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name AO0, type

func registerPostableAlertAnonAO0Annotations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: annotations LabelSet map type is not supported by go-swagger cli yet

	return nil
}

func registerPostableAlertAnonAO0EndsAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endsAtDescription := ``

	var endsAtFlagName string
	if cmdPrefix == "" {
		endsAtFlagName = "endsAt"
	} else {
		endsAtFlagName = fmt.Sprintf("%v.endsAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endsAtFlagName, "", endsAtDescription)

	return nil
}

func registerPostableAlertAnonAO0StartsAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startsAtDescription := ``

	var startsAtFlagName string
	if cmdPrefix == "" {
		startsAtFlagName = "startsAt"
	} else {
		startsAtFlagName = fmt.Sprintf("%v.startsAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startsAtFlagName, "", startsAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPostableAlertFlags(depth int, m *models.PostableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve allOf AO0 fields

	err, annotationsAdded := retrievePostableAlertAnonAO0AnnotationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || annotationsAdded

	err, endsAtAdded := retrievePostableAlertAnonAO0EndsAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endsAtAdded

	err, startsAtAdded := retrievePostableAlertAnonAO0StartsAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startsAtAdded

	// retrieve model Alert
	err, aO1Added := retrieveModelAlertFlags(depth, &m.Alert, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aO1Added

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name AO0

func retrievePostableAlertAnonAO0AnnotationsFlags(depth int, m *models.PostableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	annotationsFlagName := fmt.Sprintf("%v.annotations", cmdPrefix)
	if cmd.Flags().Changed(annotationsFlagName) {
		// warning: annotations map type LabelSet is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePostableAlertAnonAO0EndsAtFlags(depth int, m *models.PostableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endsAtFlagName := fmt.Sprintf("%v.endsAt", cmdPrefix)
	if cmd.Flags().Changed(endsAtFlagName) {

		var endsAtFlagName string
		if cmdPrefix == "" {
			endsAtFlagName = "endsAt"
		} else {
			endsAtFlagName = fmt.Sprintf("%v.endsAt", cmdPrefix)
		}

		endsAtFlagValueStr, err := cmd.Flags().GetString(endsAtFlagName)
		if err != nil {
			return err, false
		}
		var endsAtFlagValue strfmt.DateTime
		if err := endsAtFlagValue.UnmarshalText([]byte(endsAtFlagValueStr)); err != nil {
			return err, false
		}
		m.EndsAt = endsAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePostableAlertAnonAO0StartsAtFlags(depth int, m *models.PostableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startsAtFlagName := fmt.Sprintf("%v.startsAt", cmdPrefix)
	if cmd.Flags().Changed(startsAtFlagName) {

		var startsAtFlagName string
		if cmdPrefix == "" {
			startsAtFlagName = "startsAt"
		} else {
			startsAtFlagName = fmt.Sprintf("%v.startsAt", cmdPrefix)
		}

		startsAtFlagValueStr, err := cmd.Flags().GetString(startsAtFlagName)
		if err != nil {
			return err, false
		}
		var startsAtFlagValue strfmt.DateTime
		if err := startsAtFlagValue.UnmarshalText([]byte(startsAtFlagValueStr)); err != nil {
			return err, false
		}
		m.StartsAt = startsAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}
