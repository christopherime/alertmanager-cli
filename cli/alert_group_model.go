// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
	"github.com/geekxflood/alertmanager-cli/models"

)

// Schema cli for AlertGroup

// register flags to command
func registerModelAlertGroupFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAlertGroupAlerts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAlertGroupLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAlertGroupReceiver(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAlertGroupAlerts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: alerts []*GettableAlert array type is not supported by go-swagger cli yet

	return nil
}

func registerAlertGroupLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: labels LabelSet map type is not supported by go-swagger cli yet

	return nil
}

func registerAlertGroupReceiver(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var receiverFlagName string
	if cmdPrefix == "" {
		receiverFlagName = "receiver"
	} else {
		receiverFlagName = fmt.Sprintf("%v.receiver", cmdPrefix)
	}

	if err := registerModelReceiverFlags(depth+1, receiverFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAlertGroupFlags(depth int, m *models.AlertGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, alertsAdded := retrieveAlertGroupAlertsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || alertsAdded

	err, labelsAdded := retrieveAlertGroupLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	err, receiverAdded := retrieveAlertGroupReceiverFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receiverAdded

	return nil, retAdded
}

func retrieveAlertGroupAlertsFlags(depth int, m *models.AlertGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	alertsFlagName := fmt.Sprintf("%v.alerts", cmdPrefix)
	if cmd.Flags().Changed(alertsFlagName) {
		// warning: alerts array type []*GettableAlert is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAlertGroupLabelsFlags(depth int, m *models.AlertGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	labelsFlagName := fmt.Sprintf("%v.labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: labels map type LabelSet is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAlertGroupReceiverFlags(depth int, m *models.AlertGroup, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	receiverFlagName := fmt.Sprintf("%v.receiver", cmdPrefix)
	if cmd.Flags().Changed(receiverFlagName) {
		// info: complex object receiver Receiver is retrieved outside this Changed() block
	}
	receiverFlagValue := m.Receiver
	if swag.IsZero(receiverFlagValue) {
		receiverFlagValue = &models.Receiver{}
	}

	err, receiverAdded := retrieveModelReceiverFlags(depth+1, receiverFlagValue, receiverFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receiverAdded
	if receiverAdded {
		m.Receiver = receiverFlagValue
	}

	return nil, retAdded
}
