// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/prometheus/alertmanager/api/v2/models"
	"github.com/spf13/cobra"
)

// Schema cli for VersionInfo

// register flags to command
func registerModelVersionInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVersionInfoBranch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionInfoBuildDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionInfoBuildUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionInfoGoVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionInfoRevision(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVersionInfoVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVersionInfoBranch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	branchDescription := `Required. `

	var branchFlagName string
	if cmdPrefix == "" {
		branchFlagName = "branch"
	} else {
		branchFlagName = fmt.Sprintf("%v.branch", cmdPrefix)
	}

	var branchFlagDefault string

	_ = cmd.PersistentFlags().String(branchFlagName, branchFlagDefault, branchDescription)

	return nil
}

func registerVersionInfoBuildDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buildDateDescription := `Required. `

	var buildDateFlagName string
	if cmdPrefix == "" {
		buildDateFlagName = "buildDate"
	} else {
		buildDateFlagName = fmt.Sprintf("%v.buildDate", cmdPrefix)
	}

	var buildDateFlagDefault string

	_ = cmd.PersistentFlags().String(buildDateFlagName, buildDateFlagDefault, buildDateDescription)

	return nil
}

func registerVersionInfoBuildUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	buildUserDescription := `Required. `

	var buildUserFlagName string
	if cmdPrefix == "" {
		buildUserFlagName = "buildUser"
	} else {
		buildUserFlagName = fmt.Sprintf("%v.buildUser", cmdPrefix)
	}

	var buildUserFlagDefault string

	_ = cmd.PersistentFlags().String(buildUserFlagName, buildUserFlagDefault, buildUserDescription)

	return nil
}

func registerVersionInfoGoVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	goVersionDescription := `Required. `

	var goVersionFlagName string
	if cmdPrefix == "" {
		goVersionFlagName = "goVersion"
	} else {
		goVersionFlagName = fmt.Sprintf("%v.goVersion", cmdPrefix)
	}

	var goVersionFlagDefault string

	_ = cmd.PersistentFlags().String(goVersionFlagName, goVersionFlagDefault, goVersionDescription)

	return nil
}

func registerVersionInfoRevision(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	revisionDescription := `Required. `

	var revisionFlagName string
	if cmdPrefix == "" {
		revisionFlagName = "revision"
	} else {
		revisionFlagName = fmt.Sprintf("%v.revision", cmdPrefix)
	}

	var revisionFlagDefault string

	_ = cmd.PersistentFlags().String(revisionFlagName, revisionFlagDefault, revisionDescription)

	return nil
}

func registerVersionInfoVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Required. `

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVersionInfoFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, branchAdded := retrieveVersionInfoBranchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || branchAdded

	err, buildDateAdded := retrieveVersionInfoBuildDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildDateAdded

	err, buildUserAdded := retrieveVersionInfoBuildUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || buildUserAdded

	err, goVersionAdded := retrieveVersionInfoGoVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || goVersionAdded

	err, revisionAdded := retrieveVersionInfoRevisionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || revisionAdded

	err, versionAdded := retrieveVersionInfoVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveVersionInfoBranchFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	branchFlagName := fmt.Sprintf("%v.branch", cmdPrefix)
	if cmd.Flags().Changed(branchFlagName) {

		var branchFlagName string
		if cmdPrefix == "" {
			branchFlagName = "branch"
		} else {
			branchFlagName = fmt.Sprintf("%v.branch", cmdPrefix)
		}

		branchFlagValue, err := cmd.Flags().GetString(branchFlagName)
		if err != nil {
			return err, false
		}
		m.Branch = &branchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionInfoBuildDateFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buildDateFlagName := fmt.Sprintf("%v.buildDate", cmdPrefix)
	if cmd.Flags().Changed(buildDateFlagName) {

		var buildDateFlagName string
		if cmdPrefix == "" {
			buildDateFlagName = "buildDate"
		} else {
			buildDateFlagName = fmt.Sprintf("%v.buildDate", cmdPrefix)
		}

		buildDateFlagValue, err := cmd.Flags().GetString(buildDateFlagName)
		if err != nil {
			return err, false
		}
		m.BuildDate = &buildDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionInfoBuildUserFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	buildUserFlagName := fmt.Sprintf("%v.buildUser", cmdPrefix)
	if cmd.Flags().Changed(buildUserFlagName) {

		var buildUserFlagName string
		if cmdPrefix == "" {
			buildUserFlagName = "buildUser"
		} else {
			buildUserFlagName = fmt.Sprintf("%v.buildUser", cmdPrefix)
		}

		buildUserFlagValue, err := cmd.Flags().GetString(buildUserFlagName)
		if err != nil {
			return err, false
		}
		m.BuildUser = &buildUserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionInfoGoVersionFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	goVersionFlagName := fmt.Sprintf("%v.goVersion", cmdPrefix)
	if cmd.Flags().Changed(goVersionFlagName) {

		var goVersionFlagName string
		if cmdPrefix == "" {
			goVersionFlagName = "goVersion"
		} else {
			goVersionFlagName = fmt.Sprintf("%v.goVersion", cmdPrefix)
		}

		goVersionFlagValue, err := cmd.Flags().GetString(goVersionFlagName)
		if err != nil {
			return err, false
		}
		m.GoVersion = &goVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionInfoRevisionFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	revisionFlagName := fmt.Sprintf("%v.revision", cmdPrefix)
	if cmd.Flags().Changed(revisionFlagName) {

		var revisionFlagName string
		if cmdPrefix == "" {
			revisionFlagName = "revision"
		} else {
			revisionFlagName = fmt.Sprintf("%v.revision", cmdPrefix)
		}

		revisionFlagValue, err := cmd.Flags().GetString(revisionFlagName)
		if err != nil {
			return err, false
		}
		m.Revision = &revisionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVersionInfoVersionFlags(depth int, m *models.VersionInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
