// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/geekxflood/alertmanager-cli/models"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"
)

// Schema cli for GettableAlert

// register flags to command
func registerModelGettableAlertFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register anonymous fields for AO0

	if err := registerGettableAlertAnonAO0Annotations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGettableAlertAnonAO0EndsAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGettableAlertAnonAO0Fingerprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGettableAlertAnonAO0Receivers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGettableAlertAnonAO0StartsAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGettableAlertAnonAO0Status(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGettableAlertAnonAO0UpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register embedded Alert flags

	if err := registerModelAlertFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name AO0, type

func registerGettableAlertAnonAO0Annotations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: annotations LabelSet map type is not supported by go-swagger cli yet

	return nil
}

func registerGettableAlertAnonAO0EndsAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endsAtDescription := `Required. `

	var endsAtFlagName string
	if cmdPrefix == "" {
		endsAtFlagName = "endsAt"
	} else {
		endsAtFlagName = fmt.Sprintf("%v.endsAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endsAtFlagName, "", endsAtDescription)

	return nil
}

func registerGettableAlertAnonAO0Fingerprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fingerprintDescription := `Required. `

	var fingerprintFlagName string
	if cmdPrefix == "" {
		fingerprintFlagName = "fingerprint"
	} else {
		fingerprintFlagName = fmt.Sprintf("%v.fingerprint", cmdPrefix)
	}

	var fingerprintFlagDefault string

	_ = cmd.PersistentFlags().String(fingerprintFlagName, fingerprintFlagDefault, fingerprintDescription)

	return nil
}

func registerGettableAlertAnonAO0Receivers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: receivers []*Receiver array type is not supported by go-swagger cli yet

	return nil
}

func registerGettableAlertAnonAO0StartsAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startsAtDescription := `Required. `

	var startsAtFlagName string
	if cmdPrefix == "" {
		startsAtFlagName = "startsAt"
	} else {
		startsAtFlagName = fmt.Sprintf("%v.startsAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startsAtFlagName, "", startsAtDescription)

	return nil
}

func registerGettableAlertAnonAO0Status(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	if err := registerModelAlertStatusFlags(depth+1, statusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGettableAlertAnonAO0UpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := `Required. `

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updatedAtFlagName, "", updatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGettableAlertFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve allOf AO0 fields

	err, annotationsAdded := retrieveGettableAlertAnonAO0AnnotationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || annotationsAdded

	err, endsAtAdded := retrieveGettableAlertAnonAO0EndsAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endsAtAdded

	err, fingerprintAdded := retrieveGettableAlertAnonAO0FingerprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fingerprintAdded

	err, receiversAdded := retrieveGettableAlertAnonAO0ReceiversFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || receiversAdded

	err, startsAtAdded := retrieveGettableAlertAnonAO0StartsAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startsAtAdded

	err, statusAdded := retrieveGettableAlertAnonAO0StatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updatedAtAdded := retrieveGettableAlertAnonAO0UpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	// retrieve model Alert
	err, aO1Added := retrieveModelAlertFlags(depth, &m.Alert, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aO1Added

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name AO0

func retrieveGettableAlertAnonAO0AnnotationsFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	annotationsFlagName := fmt.Sprintf("%v.annotations", cmdPrefix)
	if cmd.Flags().Changed(annotationsFlagName) {
		// warning: annotations map type LabelSet is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGettableAlertAnonAO0EndsAtFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endsAtFlagName := fmt.Sprintf("%v.endsAt", cmdPrefix)
	if cmd.Flags().Changed(endsAtFlagName) {

		var endsAtFlagName string
		if cmdPrefix == "" {
			endsAtFlagName = "endsAt"
		} else {
			endsAtFlagName = fmt.Sprintf("%v.endsAt", cmdPrefix)
		}

		endsAtFlagValueStr, err := cmd.Flags().GetString(endsAtFlagName)
		if err != nil {
			return err, false
		}
		var endsAtFlagValue strfmt.DateTime
		if err := endsAtFlagValue.UnmarshalText([]byte(endsAtFlagValueStr)); err != nil {
			return err, false
		}
		m.EndsAt = &endsAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGettableAlertAnonAO0FingerprintFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fingerprintFlagName := fmt.Sprintf("%v.fingerprint", cmdPrefix)
	if cmd.Flags().Changed(fingerprintFlagName) {

		var fingerprintFlagName string
		if cmdPrefix == "" {
			fingerprintFlagName = "fingerprint"
		} else {
			fingerprintFlagName = fmt.Sprintf("%v.fingerprint", cmdPrefix)
		}

		fingerprintFlagValue, err := cmd.Flags().GetString(fingerprintFlagName)
		if err != nil {
			return err, false
		}
		m.Fingerprint = &fingerprintFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGettableAlertAnonAO0ReceiversFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	receiversFlagName := fmt.Sprintf("%v.receivers", cmdPrefix)
	if cmd.Flags().Changed(receiversFlagName) {
		// warning: receivers array type []*Receiver is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveGettableAlertAnonAO0StartsAtFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startsAtFlagName := fmt.Sprintf("%v.startsAt", cmdPrefix)
	if cmd.Flags().Changed(startsAtFlagName) {

		var startsAtFlagName string
		if cmdPrefix == "" {
			startsAtFlagName = "startsAt"
		} else {
			startsAtFlagName = fmt.Sprintf("%v.startsAt", cmdPrefix)
		}

		startsAtFlagValueStr, err := cmd.Flags().GetString(startsAtFlagName)
		if err != nil {
			return err, false
		}
		var startsAtFlagValue strfmt.DateTime
		if err := startsAtFlagValue.UnmarshalText([]byte(startsAtFlagValueStr)); err != nil {
			return err, false
		}
		m.StartsAt = &startsAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGettableAlertAnonAO0StatusFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {
		// info: complex object status AlertStatus is retrieved outside this Changed() block
	}
	statusFlagValue := m.Status
	if swag.IsZero(statusFlagValue) {
		statusFlagValue = &models.AlertStatus{}
	}

	err, statusAdded := retrieveModelAlertStatusFlags(depth+1, statusFlagValue, statusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded
	if statusAdded {
		m.Status = statusFlagValue
	}

	return nil, retAdded
}

func retrieveGettableAlertAnonAO0UpdatedAtFlags(depth int, m *models.GettableAlert, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
		}

		updatedAtFlagValueStr, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		var updatedAtFlagValue strfmt.DateTime
		if err := updatedAtFlagValue.UnmarshalText([]byte(updatedAtFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdatedAt = &updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}
