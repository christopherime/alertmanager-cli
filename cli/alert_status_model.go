// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/geekxflood/alertmanager-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for AlertStatus

// register flags to command
func registerModelAlertStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAlertStatusInhibitedBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAlertStatusSilencedBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAlertStatusState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAlertStatusInhibitedBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: inhibitedBy []string array type is not supported by go-swagger cli yet

	return nil
}

func registerAlertStatusSilencedBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: silencedBy []string array type is not supported by go-swagger cli yet

	return nil
}

func registerAlertStatusState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stateDescription := `Enum: ["unprocessed","active","suppressed"]. Required. `

	var stateFlagName string
	if cmdPrefix == "" {
		stateFlagName = "state"
	} else {
		stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var stateFlagDefault string

	_ = cmd.PersistentFlags().String(stateFlagName, stateFlagDefault, stateDescription)

	if err := cmd.RegisterFlagCompletionFunc(stateFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["unprocessed","active","suppressed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAlertStatusFlags(depth int, m *models.AlertStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, inhibitedByAdded := retrieveAlertStatusInhibitedByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inhibitedByAdded

	err, silencedByAdded := retrieveAlertStatusSilencedByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || silencedByAdded

	err, stateAdded := retrieveAlertStatusStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stateAdded

	return nil, retAdded
}

func retrieveAlertStatusInhibitedByFlags(depth int, m *models.AlertStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inhibitedByFlagName := fmt.Sprintf("%v.inhibitedBy", cmdPrefix)
	if cmd.Flags().Changed(inhibitedByFlagName) {
		// warning: inhibitedBy array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAlertStatusSilencedByFlags(depth int, m *models.AlertStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	silencedByFlagName := fmt.Sprintf("%v.silencedBy", cmdPrefix)
	if cmd.Flags().Changed(silencedByFlagName) {
		// warning: silencedBy array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveAlertStatusStateFlags(depth int, m *models.AlertStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stateFlagName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(stateFlagName) {

		var stateFlagName string
		if cmdPrefix == "" {
			stateFlagName = "state"
		} else {
			stateFlagName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		stateFlagValue, err := cmd.Flags().GetString(stateFlagName)
		if err != nil {
			return err, false
		}
		m.State = &stateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
